# –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é –ø—Ä–æ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π, –ø–æ—á–∏—Ç–∞–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –¥–µ–ª–∞—Ç—å
# https://surik00.gitbooks.io/aiogram-lessons/content/chapter3.html
import json
import logging
from handlers.adding_dishes import register_handlers_food, AddDish
import requests
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
import keyboards
from handlers.menu_handler import register_handlers_menu

import db
from StateMachine import StateMachine
import config
import TGCalendar.telegramcalendar as tgcalendar
from aiogram import Bot, Dispatcher, executor, types

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

# Configure logging
logging.basicConfig(level=logging.INFO)
# Initialize bot and dispatcher
bot = Bot(token=config.TG_API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(commands=['anekdot'])
async def random_anekdot(message: types.Message):
    try:
        url = "http://rzhunemogu.ru/RandJSON.aspx?CType=11"
        r = requests.get(url=url)
        raw = r.text.replace("\n", " ").replace("\r", " ")
        print(raw)
        anekdot = json.loads(raw)
        await message.answer(anekdot["content"])
    except json.decoder.JSONDecodeError:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@dp.message_handler(state=StateMachine.PEOPLE_NUMBER)  # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞
async def people_number_message(message: types.Message):
    if message.text.isdigit():
        state = dp.current_state(user=message.chat.id)
        separated_data = str(await state.get_data()).split(";")
        date = separated_data[3].split("-")
        db.reserve_table(separated_data[2], separated_data[3],
                         message.text, separated_data[1], message.from_user.id)
        await state.reset_state()
        await message.answer(f"–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ "
                             f"—Å—Ç–æ–ª ‚Ññ{separated_data[2]} –Ω–∞ {separated_data[1]}\n"
                             f"{date[2]}.{date[1]}.{date[0]}\n"
                             f"–Ω–∞ {message.text} —á–µ–ª–æ–≤–µ–∫")
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')


@dp.callback_query_handler(lambda c: c.data.startswith('table'))  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def people_time_message(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.message.chat.id)
    separated_data = callback_query.data.split(";")
    time_kb = keyboards.get_reserved_time(f"{separated_data[2]}-{separated_data[3]}-{separated_data[4]}",
                                          separated_data[1])
    await bot.answer_callback_query(callback_query.id)
    await state.set_data(callback_query.data)
    # await state.set_state(StateMachine.all()[3])  # set people time set
    await bot.edit_message_text(text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", reply_markup=time_kb, chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)


@dp.callback_query_handler(lambda c: c.data.startswith('DAY'), state=StateMachine.ADMIN) # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –∏ –∞–¥–º–∏–Ω–∞
async def table_choose_callback(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.message.chat.id)
    separated_data = callback_query.data.split(";")
    await bot.answer_callback_query(callback_query.id)
    tables = db.get_reservations(f"{separated_data[1]}-{separated_data[2]}-{separated_data[3]}")
    if len(tables) > 0:
        for res in tables:
            await bot.send_message(text=f"{res['date']}\n"
                                        f"{res['user_name']}\n"
                                        f"{res['user_phone']}\n"
                                        f"–°—Ç–æ–ª ‚Ññ{res['table_number']} –Ω–∞ {res['people_count']} —á–µ–ª–æ–≤–µ–∫",
                                   chat_id=callback_query.message.chat.id)
    else:
        await bot.send_message(text="–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç :(", chat_id=callback_query.message.chat.id)


@dp.callback_query_handler(lambda c: c.data.startswith('reserved'))  # —Ñ—É–Ω–∫—Ü–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π
async def table_choose_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data.startswith('time'))  # —Ñ—É–Ω–∫—Ü–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π
async def table_choose_callback(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.message.chat.id)
    separated_data = callback_query.data.split(";")
    date = separated_data[3].split("-")
    await bot.answer_callback_query(callback_query.id)
    await state.set_data(callback_query.data)
    await state.set_state(StateMachine.all()[3])  # set people_number state
    await bot.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ "
                                     f"—Å—Ç–æ–ª ‚Ññ{separated_data[2]} –Ω–∞ {separated_data[1]}\n"
                                     f"{date[2]}.{date[1]}.{date[0]}\n"
                                     f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:",
                                chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)


@dp.message_handler(commands=['admin'])  # —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞
async def set_admin_state(message: types.Message):
    if str(message.from_user.id) in config.ADMIN_IDS:
        state = dp.current_state(user=message.chat.id)
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(types.KeyboardButton(text="‚úâ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É‚úâ"))
        kb.add(types.KeyboardButton(text="üìä–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—Éüìä"))
        kb.add(types.KeyboardButton(text="üçΩ–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æüçΩ"))
        kb.add(types.KeyboardButton(text="‚ùå–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞‚ùå"))
        await state.set_state(StateMachine.all()[0])  # set admin state
        await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞", reply_markup=kb)
    else:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å")


@dp.message_handler(commands=['reservations'], state=StateMachine.ADMIN) # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –∞–¥–º–∏–Ω–∞
async def reservations(message: types.Message):
    calendar_keyboard = tgcalendar.create_calendar()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar_keyboard)


@dp.message_handler(state=StateMachine.ADMIN_NEW_CATEGORY)
async def category_message(message: types.Message):
    db.add_category(message.text)
    state = dp.current_state(user=message.chat.id)
    await state.set_state(AddDish.waiting_for_dish_name)
    await state.update_data(category=message.text)
    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {message.text} –¥–æ–±–∞–≤–ª–µ–Ω–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞",
                         reply_markup=types.ReplyKeyboardRemove())


@dp.callback_query_handler(lambda c: c.data.startswith('category'), state=StateMachine.ADMIN)
async def category_callback(callback_query: types.CallbackQuery):
    separated_data = callback_query.data.split(";")
    state = dp.current_state(user=callback_query.message.chat.id)
    if separated_data[1] == "addnew":
        await state.set_state(StateMachine.all()[2])  # admin_new_category state
        await bot.edit_message_text(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                                    chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id)
        await bot.answer_callback_query(callback_query.id)
    else:
        await state.set_state(AddDish.waiting_for_dish_name)
        await state.update_data(category=separated_data[1])
        await bot.edit_message_text(text=f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n{callback_query.data}",
                                    chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id)
        await bot.answer_callback_query(callback_query.id)


@dp.message_handler(lambda m: m.text.startswith('üçΩ–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æüçΩ'), state=StateMachine.ADMIN)
@dp.message_handler(commands=['add'], state=StateMachine.ADMIN)
async def add_dish(message: types.Message):
    kb = keyboards.get_categories_kb()
    kb.add(types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é', callback_data='category;addnew'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb)


@dp.message_handler(lambda m: m.text.startswith('üìä–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'), state=StateMachine.ADMIN)
@dp.message_handler(commands=['stat'], state=StateMachine.ADMIN)  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–¥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def admin_statistics(message: types.Message):
    kb = InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('–ö–ª–∏–µ–Ω—Ç—ã', callback_data='stat;clients'))
    kb.add(types.InlineKeyboardButton('–í—Ä–µ–º—è', callback_data='stat;time'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith('stat'), state=StateMachine.ADMIN) # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def print_stat(callback_query: types.CallbackQuery):
    separated_data = callback_query.data.split(";")
    if separated_data[1] == 'clients':
        db.get_stat_users()
        clients= types.input_file.InputFile("clients.xlsx")
        await bot.send_document(document=clients, chat_id=callback_query.message.chat.id)
        all_days = types.input_file.InputFile("all_days.png")
        await bot.send_photo(caption=db.get_stat_order(), chat_id=callback_query.message.chat.id, photo=all_days)
    if separated_data[1] == 'time':
        messages = db.get_stat_time()
        for key, value in messages[0].items():
            caption = f"{key}\n–í—Ä–µ–º—è\t–ó–∞–∫–∞–∑—ã\t–õ—é–¥–∏\n"
            for time, text in value.items():
                caption += f"{time}\t\t\t  {text}\t\t\t         {messages[1][key][time]}\n"
            day = types.input_file.InputFile(f"{key}.png")
            await bot.send_photo(photo=day, chat_id=callback_query.message.chat.id, caption=caption)




@dp.message_handler(content_types=types.ContentType.ANY, state=StateMachine.ADMIN_MESSAGE_STATE)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def send_message(message: types.Message):
    state = dp.current_state(user=message.chat.id)
    users = db.get_all_users()
    print(message.content_type)
    for user in users:
        await message.send_copy(chat_id=user['telegram_id'])
    await state.set_state(StateMachine.all()[0])


@dp.message_handler(lambda m: m.text.startswith('‚úâ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'), state=StateMachine.ADMIN)
@dp.message_handler(commands=['send_message'], state=StateMachine.ADMIN)
async def admin_message(message: types.Message):
    state = dp.current_state(user=message.chat.id)
    await state.set_state(StateMachine.all()[1])
    await bot.send_message(text='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ', chat_id=message.chat.id)


@dp.message_handler(state=StateMachine.ADMIN)  # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def admin_message(message: types.Message):
    state = dp.current_state(user=message.chat.id)
    if message.text.startswith("‚ùå–í—ã–π—Ç–∏"):
        rm_kb = types.ReplyKeyboardRemove()
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(types.KeyboardButton(text="üçΩ–ú–µ–Ω—éüçΩ"))
        kb.add(types.KeyboardButton(text="ü™ë–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ü™ë"))
        await state.reset_state()  # exit from admin state
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞", reply_markup=kb)
    else:
        print(message.content_type)
        await message.answer("–ó–¥–∞—Ä–æ–≤–∞, –∞–¥–º–∏–Ω!")


@dp.message_handler(content_types=['contact'], state=StateMachine.REGISTRATION_PHONE_STATE)  # —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def receive_contact_message(message: types.Message):
    rm_kb = types.ReplyKeyboardRemove()
    state = dp.current_state(user=message.chat.id)
    phone_number = message.contact.phone_number
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton(text="üçΩ–ú–µ–Ω—éüçΩ"))
    kb.add(types.KeyboardButton(text="ü™ë–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ü™ë"))
    print("phone number " + message.contact.phone_number)
    if db.register_new_user(str(await state.get_data()), str(phone_number), str(message.from_user.id)):
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', reply_markup=kb)
    else:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(', reply_markup=rm_kb)
    await state.reset_state()


@dp.message_handler(state=StateMachine.REGISTRATION_NAME_STATE)  # —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def register_message(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True))
    state = dp.current_state(user=message.chat.id)
    name = message.text
    print("register name: " + message.text)
    if name == "" or not name.isalpha():
        await message.answer(f"–í–∞–º –Ω—É–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è!")
    else:
        await state.set_data(message.text)
        await message.answer(f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=kb)
    await state.set_data(name)
    await state.set_state(StateMachine.all()[6])  # set registration_phone_state


@dp.message_handler(lambda m: m.text.startswith('ü™ë–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫'))
@dp.message_handler(commands=['reserve'])
async def reserve(message: types.Message):
    calendar_keyboard = tgcalendar.create_calendar()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar_keyboard)



@dp.callback_query_handler(lambda c: c.data, state=StateMachine.ADMIN)
async def callback_calendar(callback_query: types.CallbackQuery):
    response = tgcalendar.process_calendar_selection(bot, callback_query)
    await response[0]
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data.startswith('IGNORE'))
@dp.callback_query_handler(lambda c: c.data.startswith('PREV-MONTH'))
@dp.callback_query_handler(lambda c: c.data.startswith('DAY'))
@dp.callback_query_handler(lambda c: c.data.startswith('NEXT-MONTH'))
async def callback_calendar(callback_query: types.CallbackQuery):
    response = tgcalendar.process_calendar_selection(bot, callback_query)
    await response[0]
    await bot.answer_callback_query(callback_query.id)


@dp.message_handler(commands=['help'])
async def reg(message: types.Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                         "--------------------–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã--------------------\n"
                         "/reg(/start) - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                         "/reserve - –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª\n"
                         "-------------------–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã-------------------\n"
                         "/admin - –≤–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞\n"
                         "/reservations - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É\n"
                         "/stat - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"
                         "–í—ã–π—Ç–∏ (–Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥ —á–∞—Ç–æ–º) - –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞")


@dp.message_handler(commands=['reg', 'start'])
async def reg(message: types.Message):
    telegram_id = message.from_user.id
    if db.is_registered(telegram_id):
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(types.KeyboardButton(text="üçΩ–ú–µ–Ω—éüçΩ"))
        kb.add(types.KeyboardButton(text="ü™ë–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ü™ë"))
        await message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=kb)
    else:
        state = dp.current_state(user=message.chat.id)
        await state.set_state(StateMachine.all()[5])  # registration_name_state
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")


if __name__ == '__main__':
    register_handlers_menu(dp)
    register_handlers_food(dp)
    executor.start_polling(dp)
